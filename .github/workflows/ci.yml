name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    env:
      PIP_CACHE_DIR: ${{ github.workspace }}/.pip
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare cache directories
        run: |
          mkdir -p .pip
          mkdir -p .pytest_cache

      - name: Cache pip and pytest data
        uses: actions/cache@v4
        with:
          path: |
            ./.pip
            ./.pytest_cache
          key: ${{ runner.os }}-pip-py312-${{ hashFiles('requirements.txt', 'pyproject.toml', 'environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Detect Conda environment file
        id: detect-env
        shell: bash
        run: |
          if [[ -f environment.yml ]]; then
            echo "use_conda=true" >> "$GITHUB_OUTPUT"
            echo "env_file=environment.yml" >> "$GITHUB_OUTPUT"
            echo "env_name=bluesky" >> "$GITHUB_OUTPUT"
          elif [[ -f environment.yaml ]]; then
            echo "use_conda=true" >> "$GITHUB_OUTPUT"
            echo "env_file=environment.yaml" >> "$GITHUB_OUTPUT"
            echo "env_name=bluesky" >> "$GITHUB_OUTPUT"
          else
            echo "use_conda=false" >> "$GITHUB_OUTPUT"
            echo "env_name=" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Conda
        if: steps.detect-env.outputs.use_conda == 'true'
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: ${{ steps.detect-env.outputs.env_name }}
          environment-file: ${{ steps.detect-env.outputs.env_file }}
          auto-activate-base: false
          python-version: 3.12

      - name: Set up Python
        if: steps.detect-env.outputs.use_conda != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Verify dependency manifest
        shell: python
        run: |
          import sys
          from pathlib import Path

          repo_root = Path('.')
          requirements = {
              path
              for path in repo_root.rglob('requirements*.txt')
              if path.name.lower().startswith('requirements')
          }
          expected = {Path('requirements.txt')}

          missing = expected - requirements
          extras = sorted(str(path) for path in requirements - expected)

          if missing or extras:
              if missing:
                  print('Missing expected requirements manifest:', ', '.join(str(path) for path in missing))
              if extras:
                  print('Unexpected requirements manifests detected:')
                  for path in extras:
                      print(f'- {path}')
              sys.exit(1)

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ steps.detect-env.outputs.use_conda }}" == "true" ]]; then
            conda run --no-capture-output -n ${{ steps.detect-env.outputs.env_name }} python -m pip install --upgrade pip
            conda run --no-capture-output -n ${{ steps.detect-env.outputs.env_name }} python -m pip install -r requirements.txt
          else
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
          fi

      - name: Show Python diagnostics
        shell: bash
        run: |
          if [[ "${{ steps.detect-env.outputs.use_conda }}" == "true" ]]; then
            conda run --no-capture-output -n ${{ steps.detect-env.outputs.env_name }} python --version
            conda run --no-capture-output -n ${{ steps.detect-env.outputs.env_name }} pip --version
          else
            python --version
            pip --version
          fi

      - name: Ruff lint
        shell: bash
        run: |
          if [[ "${{ steps.detect-env.outputs.use_conda }}" == "true" ]]; then
            conda run --no-capture-output -n ${{ steps.detect-env.outputs.env_name }} ruff check .
          else
            ruff check .
          fi

      - name: Mypy
        shell: bash
        run: |
          if [[ "${{ steps.detect-env.outputs.use_conda }}" == "true" ]]; then
            conda run --no-capture-output -n ${{ steps.detect-env.outputs.env_name }} mypy --config-file pyproject.toml
          else
            mypy --config-file pyproject.toml
          fi

      - name: Pytest
        shell: bash
        env:
          PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
          PYTHONWARNINGS: error
        run: |
          if [[ "${{ steps.detect-env.outputs.use_conda }}" == "true" ]]; then
            CONDA_NO_PLUGINS=true conda run --no-capture-output -n ${{ steps.detect-env.outputs.env_name }} pytest -q --cov=engine --cov=dispatch --cov=policy --cov-report=term-missing --cov-fail-under=80 -p pytest_cov
          else
            pytest -q --cov=engine --cov=dispatch --cov=policy --cov-report=term-missing --cov-fail-under=80 -p pytest_cov
          fi

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: .coverage
          if-no-files-found: ignore
